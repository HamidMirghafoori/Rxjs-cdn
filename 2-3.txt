<b>subject</b>
To understand subject let's review observable first:
An Observable is:
- unicast (one-to-one): Each subscription to an Observable is independent, and each subscriber receives its own separate execution.
- cold : Observables do not emit any data until they are subscribed to, and each subscription starts its own independent stream of data.
- read-only: An Observable only produces data; subscribers cannot push data back to the observable.
- lazy: Observables are lazy, meaning they do nothing until someone subscribes to them, and the data stream is produced on a per-subscriber basis.

subject:
A Subject is a special type of Observable that allows multi-casting, meaning it can emit values to multiple subscribers simultaneously. It acts as both an Observable and an Observer, so it can emit data, and subscribers can listen to those emissions.
Key Characteristics:
- Multicast (One-to-Many): A Subject broadcasts its data to all active subscribers, meaning all subscribers share the same execution.
- Hot Observable: Unlike regular observables, a Subject starts emitting values as soon as it's created, even if no one is subscribed yet.
- Can Push Values: You can manually emit values to a Subject using its next(), error(), and complete() methods. This makes Subject both an observable and an observer.
- Active and Imperative: Subject is actively controlled, meaning you can decide when to emit new values, and all subscribers receive the same stream of data.


In our project we have two cards that display the name and stats of the selected stock. To be able to demonstrate subject in action, we subscribe two times to the subject so each subscription does its own calculation. 
This is not a good practice, but it illustrates how subject emits one value to all its subscribers.
Here you can see the main changes:

<small>commit: subject</small>