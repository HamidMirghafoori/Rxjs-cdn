<b>map</b>
The map in RxJS functions similarly to JavaScript's map method for arrays. It applies a provided function to each item emitted by the source observable, returning a new observable.
The map operator needs an input data, so we have to use it inside pipe operator. In general most of RxJS operators will be used inside pipe operator.

In our sample project we want to change the background of each stock green if the change is positive and to red if it is negative. 
First we used subject to manage the option selection from options menu to trigger map logic, it is not RxJS way to do it but will current knowledge that's how we achieved it.
Then we used map operator to add new property to our stocks and stored it in stockPricesMapped$ observable. 

Note that we used two times of(mockPrices) for two different observables. We can use our existing observable to build new observable by simply replacing of(mockPrices) with this.stockPrices$. 

<small>branch: map</small>